//-------------------------------------------------------------------------
#include "qt_cpu_calc_float_midle_class.h"
//-------------------------------------------------------------------------
#define GET_CPU_TICK(cpu_tick) ({ __asm__ __volatile__ ("rdtsc" : "=A" (cpu_tick) : : ); })
//-------------------------------------------------------------------------
qt_cpu_calc_float_midle_class::qt_cpu_calc_float_midle_class():
    arr_size(1024*1024),
    width(7)
{

}
//-------------------------------------------------------------------------
void qt_cpu_calc_float_midle_class::run(void)
{
    int x;
    int i;
    float *A;
    float *C;
    quint64 tick1;
    quint64 tick2;
    //-------------------------------------------------------------------------
    emit logMessage(QString::fromUtf8("Выполняем программу усреднения (%1 точек) на CPU в отдельном потоке  (вычисления с плавающей точкой)").arg(width));
    //-------------------------------------------------------------------------
    tick1 = 0;
    tick2 = 0;
    //-------------------------------------------------------------------------
    A = (float *)malloc(sizeof(float) * arr_size); // выделяем место под массив А
    for(i = 0; i < arr_size; i++)              // наполняем массив данными
    {
        A[i] = (float)i;
    }
    //-------------------------------------------------------------------------
    C = (float *)malloc(sizeof(float) * arr_size); // выделяем память для массива с ответами
    for(i = 0; i < arr_size; i++)              // наполняем массив данными
    {
        C[i] = 0.0f;
    }
    //-------------------------------------------------------------------------
    GET_CPU_TICK(tick1);
    //-------------------------------------------------------------------------
    for(x = 0; x < arr_size; x++)
    {
        int xlo  = x - (width >> 1);
        int xhi  = xlo + width;
        xlo = xlo < 0 ? 0 : xlo;
        xhi = xhi > (arr_size - 1) ? (arr_size - 1) : xhi;
        float sum = 0.0f;
        int i;
        for (i = xlo; i < xhi; i++) sum += A[i];
        C[x] = sum / (float)(xhi - xlo);
    }
    //-------------------------------------------------------------------------
    GET_CPU_TICK(tick2);
    //-------------------------------------------------------------------------
    for(i = 0; i < 21; i++)
    {
        emit logMessage(QString::fromUtf8("%1 <-> %2").arg(A[i], 0, 'f', 3).arg(C[i], 0, 'f', 3));
    }
    //-------------------------------------------------------------------------
    emit logMessage(QString::fromUtf8("Програма выполнена за %1 милионов тактов CPU").arg((tick2 - tick1)/1000000.0f, 0, 'f', 3));
    //-------------------------------------------------------------------------
    free(A);
    free(C);
    //-------------------------------------------------------------------------
    exit(0);
}
//-------------------------------------------------------------------------
